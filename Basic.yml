***************#48 Installation of Minikube*******************
$ sudo su
$ apt-get update
$apt-get install docker.io
$sudo apt update && apt -y install docker.io
#Download package kubectl(CLI) to run & install Minikube
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl

curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/

apt install conntrack #minikube dependecy is that as a contract we can run minikube commands
$minikube start --vm-driver=none  #no need any driver as of now
$minikube status
$minikube version 
$kubectl get nodes 
$kubectl describe node 
$kubectl describe node <ip:copy name from get nodes> #suppose you have 10 ip and want to see a specific one

#Single CONTAINER POD ENVIRONMENT pod1.yml

kind: Pod                              
apiVersion: v1                     
metadata:                           
  name: testpod1
  annotations:
   description: My first pod 
spec:                                    
  containers:                      
    - name: c00                     
      image: ubuntu              
      command: ["/bin/bash", "-c", "while true; do echo Hello-Rahul; sleep 5 ; done"]
  restartPolicy: Never         # Defaults to Always

kubectl apply -f pod1.yml
kubectl get pods -o wide #where POD is created, details  IP
kubectl describe pod <pod_name> #more details
kubectl logs -f <pod_name> #-c <container_name> if multiple
kubectl delete pod <pod_name> or kubectl delete -f pod1.yml
kubectl exec <pod_name> -c <con_name> â€“hostname -i #To see POD IP
kubectl exec <pod_name> -it -c <con_name> -- /bin/bash #Goto inside the pod container
ps  or ps -ef

 
#MULTI CONTAINER POD ENVIRONMENT pod2.yml

kind: Pod
apiVersion: v1
metadata:
  name: testpod2
spec:
  containers:
    - name: c00
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Pandey world; sleep 5 ; done"]
    - name: c01
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello-Rahul; sleep 5 ; done"]


#POD ENVIRONMENT  VARIABLES pod3.yml

kind: Pod
apiVersion: v1
metadata:
  name: environments
spec:
  containers:
    - name: c00
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello-Rahul; sleep 5 ; done"]
      env:                        # List of environment variables to be used inside the pod
      - name: MYNAME
        value: Rahul


#Go inside container $kubectl exec <pod_name> -it - - /bin/bash 
$env
$echo $MYNAME

#POD WITH PORTS(How to expose ports inside the POD) pod4.yml

kind: Pod
apiVersion: v1
metadata:
  name: testpod4
spec:
  containers:
    - name: c00
      image: httpd
      ports:
       - containerPort: 80  
	   
check port expose -see video 

******************YAML Files used in demo*************************
49. Labels,Selectors,Replication-Controller and replica-set in Kubernetes

#LABELS pod5.yml

kind: Pod
apiVersion: v1
metadata:
  name: delhipod
  labels:                                                   
    env: development
    class: pods
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Hello-Rahul; sleep 5 ; done"]

$kubectl get pods -- show-labels 
$kubectl get pods -l env=QA (this is called selector select env is QA)
$kubectl delete pod -l env=QA
$kubectl get pods

# NODE SELECTOR EXAMPLE pod6.yml

kind: Pod
apiVersion: v1
metadata:
  name: nodelabels
  labels:
    env: development
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Hello-Rahul; sleep 5 ; done"]
    nodeSelector:                                         
       hardware: t2-medium

#EXAMPLE OF REPLICATION CONTROLLER rc1.yml

kind: ReplicationController               
apiVersion: v1
metadata:
  name: myreplica
spec:
  replicas: 2            
  selector:        
    myname: Rahul Rajput                             
  template:                
    metadata:
      name: testpod6
      labels:            
        myname: Rahul
    spec:
     containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Hello-Rahul; sleep 5 ; done"]

kubectl scale -- replicas=8 rc -l myname=Rahul


# EXAMPLE OF REPLICA SET rs1.yml

kind: ReplicaSet                                    
apiVersion: apps/v1                            
metadata:
  name: myrs
spec:
  replicas: 2  
  selector:                  
    matchExpressions:                             # these must match the labels
      - {key: myname, operator: In, values: [Rahul, Rakesh, Rajesh]}
      - {key: env, operator: NotIn, values: [production]}
  template:      
    metadata:
      name: testpod7
      labels:              
        myname: Rahul
    spec:
     containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Pandey world; sleep 5 ; done"]

Scale down - kubectl scale - - replicas=1 rs/myrs #scale down
kubectl get pods
kubectl get rs
kubectl delete pod  <podname> #delete and check
kubectl get rs
kubectl get pods

50. Deployment Object in Kubernetes-
#deploy1.yml

kind: Deployment
apiVersion: apps/v1
metadata:
   name: mydeployments
spec:
   replicas: 2
   selector:     
    matchLabels:
     name: deployment
   template:
     metadata:
       name: testpod
       labels:
         name: deployment
     spec:
      containers:
        - name: c00
          image: ubuntu
          command: ["/bin/bash", "-c", "while true; do echo Pandey world; sleep 5; done"]

kubectl get deploy
kubectl describe deploy <name>
kubectl get rs
kubectl scale --replicas=1 deploy <name> #scale down 
kubectl logs -f <pod_name> #-what is running inside the pod
kubectl rollout status deployment <name>
kubectl rollout history deployment <name>
kubectl rollout undo deployment <name>
kubectl